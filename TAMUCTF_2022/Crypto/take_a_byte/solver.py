import math
from time import sleep

def getModInverse(a, m):
    if math.gcd(a, m) != 1:
        return None
    u1, u2, u3 = 1, 0, a
    v1, v2, v3 = 0, 1, m

    while v3 != 0:
        q = u3 // v3
        v1, v2, v3, u1, u2, u3 = (
            u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3
    return u1 % m


e = 65537
n = 142340601329766635770777206868142025827135648303906321521767950463359821968347786484195570468286189226989358219855587259388045702266863705647272136227951246915219010211812867670881597286343297521061070264928021561647069809027686627213745350820280726089198348218787227379658142796612755695608708166251723918573
ct = 20051828644545482229736628106141244640599101529879885105710784481396775912918792507483557891429556884620407940642293639975351089356719043660923842126057955226821006981159497594255367990437808428738966466323561013853912103206228977372401699483483780984788644775884227931090699231710824156773590615893131558850    

a = int(math.sqrt(n))
b = -1
p=0
#  test the first 20 candidates 
for i in range(a, a-40, -2):
    if n%i == 0:
        p = i
        break

q = n / p
phi = int((p-1) * (q-1))
d = getModInverse(e, phi)

# Decrypt ciphertext
pt = pow(ct, d, n)
print(pt)